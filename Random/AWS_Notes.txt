-----------------------
- AMAZON WEB SERVICES -
-----------------------

****************
* May 11, 2017 *
****************

I promise, I will learn how to use AWS so that I can finally run code in
clusters instead of running pseudo-parallel code on my personal workstation.

First, a few pointers, definitions, etc:

- Be careful! Don't run code for no reasons. This uses up resources. It's not
  like my personal machine where I can pound it for no reason. Again, be
  careful. Also, be mindful of the location of the actual computing resources
  I'm using.

- Amazon Web Services (AWS). It seems like I can use this just by using my
  normal Amazon account. It provides a number of services for cloud computing,
  which lets me use lots of computing power via the Internet, so long as we
  pay an amount commensurate with our usage level. See also:

  > Cloud computing provides a simple way to access servers, storage, databases
  > and a broad set of application services over the Internet. A Cloud services
  > platform such as Amazon Web Services owns and maintains the
  > network-connected hardware required for these application services, while
  > you provision and use what you need via a web application.

  (Cloud computing is really a marketing term ... don't put too much thought
  into it. Just think of it as a way for me to access lots of resources without
  having to buy them online, assemble my workstation, tell Berkeley to hook them
  up to the Internet, etc. I have one desktop that took me a while to set up; a
  server with many machines would take a lot longer to set up.)

- Amazon Elastic Compute Cloud (EC2). These "EC2 Instances" are "virtual
  machines" that AWS provides, i.e. EC2 is a component of AWS.  It seems to be
  an example of "Infrastructure as a Service" (IaaS).
  
- Amazon Machine Instances (AMI). These are virtual machines. I can use these to
  launch stuff within the EC2. Don't forget to keep the key-pair! I think the
  point with cloud computing is that we can pick and choose which images match
  our desired specs and then "run them." To connect to these, use the good
  old-fashioned ssh. There are community-provided AMIs which I assume are from
  people/groups around the world who are letting us use their machines in
  exchange for payment. There are also marketplace AMIs, which are verified by
  AWS.

- Google Cloud. I don't think I need to use this? It seems to be an alternative
  to Amazon Web Services. Once I have a Google Cloud account, I can create
  Google Compute Engines (GCEs) to run code, and even use Jupyter Notebooks for
  those which I can access in my local browser. For GPUs, I need to send in
  special requests.

See the following for a comparison between these two:

http://cloudacademy.com/blog/google-cloud-vs-aws-a-comparison/

The AWS website has lots of tutorials. I will check those tomorrow.

Python libraries to know/learn:

- boto (or boto3?)
- redis
- multiprocessing
- click

I've only "used" multiprocessing before ... and it didn't work for me. Also,
click seems to be more for command line arguments instead of distributed
systems. It seems to be an alternative to argparse ... yeah, I better check that
out! It might take up the subject of my next blog post.


****************
* May 12, 2017 *
****************

I went through this 10-minute tutorial: "Launch a Linux Virtual Machine".
Highlights:

- After clicking "Launch Instance", I get to the familiar AMI page. Think of
  this as a place to choose my desired computer specs. (Note: to avoid
  confusion, this is what happens when we're at the AWS console; there is
  another "Launch Instance(s)" button that happens later, once I'm actually
  ready to do something.)

- The tutorial uses a "General Purpose Instance" which should probably be my
  default choice for applications, unless I have a pressing reason to use
  something else. It also automatically clicks the "free tier eligible" image.

- Wow, there is a LOT of stuff on the AWS Interface. Getting used to the GUI
  will take a while, but I at least know how to see my instances.

- I can connect to my instance using:

    ssh -i ~/.ssh/MyKeyPair.pem ec2-user@{IP_Address}

  The IP address can be found on the AWS interface. This puts me in the
  `/home/ec2-user` folder on an instance, and it looks like I'm the only user.
  Huh, that's interesting, I thought this was going to be a shared machine with
  loads of users. Looks like `python` is installed, but not `ipython`. Argh.

- I terminated the state, and I got this message:

    Broadcast message from root@ip-[IP CENSORED]
        (unknown) at 16:55 ...
    
    The system is going down for power off NOW!
    Connection to [IP CENSORED] closed by remote host.
    Connection to [IP CENSORED] closed.

  Interesting ... if we did *not* terminate the instance (but it was idle) then
  we still get charged. I didn't get charged (I hope not ...).


Another potential resource:

http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts.html

"Setting Up":

- I see, this is why I didn't need a password:

  > AWS uses public-key cryptography to secure the login information for your
  > instance. A Linux instance has no password; you use a key pair to log in to
  > your instance securely. You specify the name of the key pair when you launch
  > your instance, then provide the private key when you log in using SSH.

- There's some stuff about "Virtual Private Clouds" and "Security Groups," but
  I'm not sure I understand or if it's that important right now. Think of those
  as firewalls, maybe? Yeah, the EC2 console says security groups control access
  to the instance.


"Getting Started":

- This is basically the same as the 10-minute tutorial. They also tell us how to
  connect with a browser. That might be inconvenient, but maybe not, if we're
  running on 1000 machines. But how do we run code using this? There must be
  some command line?

- Oh, here's what they say about termination:

  > Terminating an instance effectively deletes it; you can't reconnect to an
  > instance after you've terminated it.

  I see. On the EC2 console, I can't seem to re-start that instance I created in
  that 10-minute tutorial. There is, however, a difference between STOPPING and
  instance versus TERMINATING an instance. The former lets me reuse the instance
  at some point later (and it doesn't charge me for the stopping period, though
  there IS a charge for storage ... look at their description about this).


For billing, see:

http://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/billing-what-is.html

A few pointers:

- To see billing on the dashboard, click my name, and then the billing dashboard
  setting. It should be intuitive.

- Try to use the free tier to test things:

  > You can test-drive some AWS services free of charge, within certain usage
  > limits. AWS calls this the AWS Free Tier. The free tier is designed to give
  > you hands-on experience with a range of AWS services at no charge. For
  > example, you can explore AWS as a platform for your business by setting up a
  > test website with a server, alarms, and database. You can also try out
  > services for developers, such as AWS CodePipeline, AWS Data Pipeline, and
  > AWS Device Farm.

- Actually, looks like I'm not on the free tier since I had made the account in
  November 2015 despite NOT EVER USING IT ... 


For running on *clusters*, see:

http://docs.aws.amazon.com/AmazonECS/latest/developerguide/Welcome.html

<<<<<<< HEAD
Another piece of software that might be useful is Packer. This helps me create
identical machine images (i.e. AMIs) so that the nodes in a cluster are running
and using the same stuff/settings. It's installed on my station.  Use `.json`
files for building images (be careful about expenses!).


****************
* May 28, 2017 *
****************

OK, I managed to finally make a new account, so I get the one-year free tier
award. Let's see how that works out for me. Now let me try Jonathan Ho's
Evolution Strategies code. How do we use Packer again?

=======
Packer might be useful for running on clusters. This helps me create identical
machine images (i.e. AMIs) so that the nodes in a cluster are running and using
the same stuff/settings. It's installed on my station.  Use `.json` files for
building images (be careful about expenses!). These are configuration files to
allow us to specify various settings about the image(s) we want to build. Run 

    `packer build XXX.json` 
    
to build it. However, I think this requires two keys from AWS, which I can
obtain online. I think I can just make them for me personally. They recommend
creating keys separately for IAM users, but that seems to be more helpful for
organizations with many users (kind of like computers with user accounts).

NOTE: IAM = "Identity and Access Management."

After running Packer's examples with my provided keys, I have a **snapshot**. It
was a bit tricky to find. I had to search in the US-east region (N. Virginia),
not the US-west region (N. California). Then click on "Snapshots" and I can see
my AMI. This is **my** AMI, actually. So I'll get charged! 

In addition, assuming I'm in the right region, when I launch an instance, I can
go to "My AMIs" and I will see that image right there. (It doesn't work if I'm
using N. California, so the lesson is that one needs to be aware of what regions
were used!)

To be clear, what got created out of this configuration file was NOT an
"Instance," but it seems to be either an "Image --> AMIs" or an "Elastic Block
Store --> Snapshots." Strangely, I see something underneath both of those menu
options ... I'm not sure what's the difference. They seem to be similar, except
AMIs are, I assume, something that's representative of a full system, whereas
the snapshots are backups of those ... yeah, it's not clear. Maybe check this:

https://serverfault.com/questions/268719/amazon-ec2-terminology-ami-vs-ebs-vs-snapshot-vs-volume?

Snapshots and Volumes should be subsets or types of EBSs, which themselves look
like hard drives. Volumes are pieces and bits of EBSs, and Snapshots are
captures (i.e. copies) of volumes at specific times.

I *think* I have an idea of what an image means. I mean, with CS 231n, they
provide an image with specialized GPU and Deep Learning stuff. That's with the
"Community AMIs" of course.

From Packer:

  > After running the above example, your AWS account now has an AMI associated
  > with it. AMIs are stored in S3 by Amazon, so unless you want to be charged
  > about $0.01 per month, you'll probably want to remove it. Remove the AMI by
  > first deregistering it on the AWS AMI management page. Next, delete the
  > associated snapshot on the AWS snapshot management page.

I just did both of those.
